/*
 * myUart.c
 *
 *  Created on: Dec 7, 2021
 *      Author: lenovo
 */

#include "user_uart.h"
#include "user_define.h"

/*==================var struct======================*/

#define RxBuf_SIZE      10

     
uint8_t UartDebugBuff[1200] = {0};
sData 	sUartDebug = {&UartDebugBuff[0], 0};

uint8_t UartSimRxByte = 0;
uint8_t UartDebugRxByte = 0;
uint8_t Uart485RxByte = 0;


extern DMA_HandleTypeDef hdma_usart3_rx;
     
static uint8_t aUART_RX_DMA_1 [RxBuf_SIZE];
uint8_t RxBuf[RxBuf_SIZE];
uint8_t RxBuf[RxBuf_SIZE];
     
uint8_t IsUart1IDLEInterupt = false;
uint8_t IsUart2IDLEInterupt = false;
uint8_t IsUart3IDLEInterupt = false;

/*==================Function======================*/

void Init_Uart_Sim_Rx_IT (void)
{
//    __HAL_UART_ENABLE_IT(&uart_sim, UART_IT_RXNE);
    
    HAL_UART_Receive_IT(&uart_sim, &UartSimRxByte, 1);
}

void Init_Uart_Debug_Rx_IT (void)
{
#if (UART_RX_MODE == UART_RX_IT)
//    __HAL_UART_ENABLE_IT(&uart_debug, UART_IT_RXNE);
    
    HAL_UART_Receive_IT(&uart_debug, &UartDebugRxByte, 1);
#else
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuf, RxBuf_SIZE);
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);  
#endif
}


void Init_Uart_485_Rx_IT (void)
{
//    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
    
#if (UART_RX_MODE == UART_RX_IT)
    HAL_UART_Receive_IT(&huart1, &Uart485RxByte, 1);
#else
    HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuf, RxBuf_SIZE);
    __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);  
#endif
}


void DeInit_Uart_Sim_Rx_IT (void)
{
    //__HAL_UART_DISABLE_IT(&uart_sim, UART_IT_RXNE);   
}


void Init_Uart_Module (void)
{   
    Init_Uart_Sim_Rx_IT();
    Init_Uart_Debug_Rx_IT();
    Init_Uart_485_Rx_IT();
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
//	if (huart->Instance == uart_sim.Instance)
//	{
//        *(sUartSim.Data_a8 + sUartSim.Length_u16++) = UartSimRxByte;
//
//        if (sUartSim.Length_u16 >= (sizeof(uartSimBuffReceive) - 1))
//            sUartSim.Length_u16 = 0;
//
//        HAL_UART_Receive_IT(&uart_sim, &UartSimRxByte, 1);
//        
//        fevent_enable(sEventSim, _EVENT_SIM_UART_RECEIVE);        
//	} 
//
//	if (huart->Instance == uart_debug.Instance)
//	{
//        *(sUartDebug.Data_a8 + sUartDebug.Length_u16++) = UartDebugRxByte;
//
//        if (sUartDebug.Length_u16 > (sizeof (UartDebugBuff) - 1))
//            sUartDebug.Length_u16 = 0;
//
//        HAL_UART_Receive_IT(&uart_debug, &UartDebugRxByte, 1);
//        
//        fevent_enable(sEventAppComm, _EVENT_PROCESS_UART_DEBUG);
//	}
//    
//    if (huart->Instance == huart1.Instance)
//	{
//        *(sUart485.Data_a8 + sUart485.Length_u16++) = Uart485RxByte;
//
//        if (sUart485.Length_u16 >= (sizeof(aUART_485_DATA) - 1))
//            sUart485.Length_u16 = 0;
//        
//        HAL_UART_Receive_IT(&huart1, &Uart485RxByte, 1);
//        
//       sTempHumi.ModBusStatus_u8 = TRUE;
//    }
}


uint8_t aTEST_SIZE[10];
uint8_t CountStep = 0;


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
    uint16_t NbByteRec = 0, i = 0;
    static uint16_t OldPos = 0;

    if (huart->Instance == uart_debug.Instance)
    {
        //Kiem tra length cua buff nhan
        if ( (sUartDebug.Length_u16 + NbByteRec) > sizeof (UartDebugBuff) )
                sUartDebug.Length_u16 = 0;
        
        //Chia 2 truong hop
        if (Size > OldPos)
        {
            NbByteRec = Size - OldPos;
            
            for (i = 0; i < NbByteRec; i++)
                *(sUartDebug.Data_a8 + sUartDebug.Length_u16 + i) = RxBuf[OldPos + i]; 
            
            sUartDebug.Length_u16 += NbByteRec;
        } else
        {
            NbByteRec = RxBuf_SIZE - OldPos;

            for (i = 0; i < NbByteRec; i++)
                *(sUartDebug.Data_a8 + sUartDebug.Length_u16 + i) = RxBuf[OldPos + i]; 
            
            for (i = 0; i < Size; i++)
                *(sUartDebug.Data_a8 + sUartDebug.Length_u16 + i) = RxBuf[i]; 
            
            sUartDebug.Length_u16 += (Size + NbByteRec) ;
        }

        aTEST_SIZE[CountStep] = Size;
        CountStep++;
        if ( CountStep >= 10)
        {
            CountStep = 0;
        }
        //Cap nhat lai Old Position
        OldPos = Size;
        
        if (IsUart3IDLEInterupt == true)
        {
            IsUart3IDLEInterupt = false;
            //
            fevent_enable(sEventAppComm, _EVENT_PROCESS_UART_DEBUG);
        }
    }
}


  
  
  
  
  
  
  
  
  
  
  
  

